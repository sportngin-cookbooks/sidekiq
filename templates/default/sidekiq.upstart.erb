# /etc/init/sidekiq.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See sidekiq-manager.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then mange sidekiq with:
#   sudo start sidekiq app=/path/to/app index=0
#   sudo stop sidekiq app=/path/to/app  index=0
#   sudo status sidekiq app=/path/to/app index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#

description "Sidekiq Background Worker"

# no "start on", we don't want to automatically start
stop on (stopping sidekiq-manager or runlevel [06])

respawn
respawn limit 3 30

# TERM and USR1 are sent by sidekiqctl when stopping sidekiq.  Without declaring these as normal exit codes, it just respawns.
normal exit 0 TERM USR1

instance ${app}-${index}


exec sudo -u <%= @user %> /bin/bash -c "cd $app && <%= @exec_prefix %> sidekiq -i ${index} -e staging -C config/sidekiq.yml -P tmp/pids/${index}.pid"

pre-stop script
# this script runs in /bin/sh by default
# respawn as bash so we can source in rbenv
exec /bin/bash <<EOT

  logger -t sidekiq "Stopping process: $app-$index"

  cd $app
  <%= @exec_prefix %> sidekiqctl stop <%= @pids_dir %>/${index}.pid
EOT
end script
